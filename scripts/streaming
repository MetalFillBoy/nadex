#!/usr/bin/env python
from __future__ import print_function

import logging
import traceback

from pprint import pprint
from nadex import NadexRestApi
from nadex.lightstreamer import LSClient, Subscription


logging.basicConfig(level=logging.INFO)


def get_quote(client, target_market, target_asset_class, target_instrument=None):
    markets = client.Market.all()
    for m in markets:
        if m.name != target_market:
            #print("ignore", m.name)
            continue
        # get list of instruments for the market
        asset_classes = client.Market.get(m.id)
        for asset_class in asset_classes:
            if asset_class.name != target_asset_class:
                #print("  ignore", asset_class.name)
                continue
            expiries = client.Timeseries.get(asset_class.id)
            if expiries:
                epic = None
                for expiry in expiries:
                    # print(expiry.id, expiry.name)
                    contracts = client.Contract.get(expiry.id)
                    for contract in contracts:
                        yield (expiry.id, contract.epic)
            else:
                contracts = client.Contract.get(asset_class.id)
                for contract in contracts:
                    if contract.instrumentName.startswith(target_instrument):
                        yield (asset_class.id, contract.epic)

# A simple function acting as a Subscription listener
def on_item_update(item_update):
    print(item_update)
    return


# A simple function acting as a Subscription listener
def on_prices_update(item_update):
    name = item_update.get('name','').split('|')[1]
    print(name, item_update.get('values'))


def on_account_update(balance_update):
    print("balance: %s " % balance_update)

def main(client, target_market, target_asset_class, target_instrument):
    account = client.Account.login()
    user = account.currentAccountId
    lightstreamerEndpoint = account.lightstreamerEndpoint

    # Establishing a new connection to Lightstreamer Server
    print("Starting connection: {}".format(lightstreamerEndpoint))
    lightstreamer_client = LSClient(lightstreamerEndpoint, "InVisionProvider",
                                    user=user,
                                    password='XST-{}'.format(client.connection.get_xst()))
    try:
        lightstreamer_client.connect()
    except Exception as e:
        print("Unable to connect to Lightstreamer Server")
        print(traceback.format_exc())
        return

    # Making a new Subscription in MERGE mode
    keys = []
    for instrument_id, epic in get_quote(client, target_market, target_asset_class, target_instrument):
        s = Subscription(
                mode="MERGE",
                items=['V2-F-HIG,CPC,UBS,AS1,CBS,BS1,AK1,CPT,LOW,CSP,UTM,BD1|{epic}'.format(epic=epic)],
                fields=["HIG", "CPC", "UBS", "AS1", "CBS", "BS1", "AK1", "CPT", "LOW", "CSP", "UTM", "BD1"],
        )
        s.addlistener(on_prices_update)
        keys.append(lightstreamer_client.subscribe(s))
        #s = Subscription(
        #        mode="MERGE",
        #        items=['V2-F-MKT|{epic}'.format(epic=epic)],
        #        fields=["MKT"],
        #)
        #s.addlistener(on_item_update)
        #keys.append(lightstreamer_client.subscribe(s))

        s = Subscription(
            mode="MERGE",
            items=['M___.MGE|HIER-{instrument_id}-JSON'.format(instrument_id=instrument_id)],
            fields=['JSON']
        )
        s.addlistener(on_prices_update)
        keys.append(lightstreamer_client.subscribe(s))

    input("{0:-^80}\n".format("HIT CR TO UNSUBSCRIBE AND DISCONNECT FROM LIGHTSTREAMER"))

    for k in keys:
        lightstreamer_client.unsubscribe(k)

    # Disconnecting
    lightstreamer_client.disconnect()


if __name__ == '__main__':
    target_market = '5 Minute Binaries'
    target_asset_class = 'Forex'
    target_instrument = 'EUR/USD'
    client = NadexRestApi()
    client.Account.login()
    for c in get_quote(client, target_market, target_asset_class):
        print(c)
    main(client, target_market, target_asset_class, target_instrument)
